
// Generated by Akka gRPC. DO NOT EDIT.
package com.example.cirp;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static com.example.cirp.RegistrationService.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


@AkkaGrpcGenerated
public abstract class RegistrationServiceClient extends RegistrationServiceClientPowerApi implements RegistrationService, AkkaGrpcClient {
  public static final RegistrationServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultRegistrationServiceClient(settings, sys);
  }

  @AkkaGrpcGenerated
  protected final static class DefaultRegistrationServiceClient extends RegistrationServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultRegistrationServiceClient(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
        this.settings = settings;
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.clientState = new ClientState(
          settings,
          akka.event.Logging$.MODULE$.apply(sys.classicSystem(), DefaultRegistrationServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultRegistrationServiceClient>fromAnyClass()),
          sys);
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      private final SingleResponseRequestBuilder<com.example.cirp.RegistrationAPI.UserDetails, com.google.protobuf.Empty> createUserRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(createUserDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.example.cirp.RegistrationAPI.otp, com.example.cirp.RegistrationAPI.verifyotpResponse> verifyOtpRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(verifyOtpDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.example.cirp.RegistrationAPI.getUser, com.example.cirp.RegistrationAPI.UserDetails> getUserRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(getUserDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of createUser
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> createUser(com.example.cirp.RegistrationAPI.UserDetails request) {
          return createUser().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer createUser(com.example.cirp.RegistrationAPI.UserDetails) if possible.
         */
        
          public SingleResponseRequestBuilder<com.example.cirp.RegistrationAPI.UserDetails, com.google.protobuf.Empty> createUser()
        
        {
          return createUserRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of verifyOtp
         */
        public java.util.concurrent.CompletionStage<com.example.cirp.RegistrationAPI.verifyotpResponse> verifyOtp(com.example.cirp.RegistrationAPI.otp request) {
          return verifyOtp().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer verifyOtp(com.example.cirp.RegistrationAPI.otp) if possible.
         */
        
          public SingleResponseRequestBuilder<com.example.cirp.RegistrationAPI.otp, com.example.cirp.RegistrationAPI.verifyotpResponse> verifyOtp()
        
        {
          return verifyOtpRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of getUser
         */
        public java.util.concurrent.CompletionStage<com.example.cirp.RegistrationAPI.UserDetails> getUser(com.example.cirp.RegistrationAPI.getUser request) {
          return getUser().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getUser(com.example.cirp.RegistrationAPI.getUser) if possible.
         */
        
          public SingleResponseRequestBuilder<com.example.cirp.RegistrationAPI.getUser, com.example.cirp.RegistrationAPI.UserDetails> getUser()
        
        {
          return getUserRequestBuilder(clientState.internalChannel());
        }
      

      
        private static MethodDescriptor<com.example.cirp.RegistrationAPI.UserDetails, com.google.protobuf.Empty> createUserDescriptor =
          MethodDescriptor.<com.example.cirp.RegistrationAPI.UserDetails, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("com.example.cirp.RegistrationService", "CreateUser"))
            .setRequestMarshaller(new ProtoMarshaller<com.example.cirp.RegistrationAPI.UserDetails>(UserDetailsSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.example.cirp.RegistrationAPI.otp, com.example.cirp.RegistrationAPI.verifyotpResponse> verifyOtpDescriptor =
          MethodDescriptor.<com.example.cirp.RegistrationAPI.otp, com.example.cirp.RegistrationAPI.verifyotpResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("com.example.cirp.RegistrationService", "VerifyOtp"))
            .setRequestMarshaller(new ProtoMarshaller<com.example.cirp.RegistrationAPI.otp>(otpSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.example.cirp.RegistrationAPI.verifyotpResponse>(verifyotpResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.example.cirp.RegistrationAPI.getUser, com.example.cirp.RegistrationAPI.UserDetails> getUserDescriptor =
          MethodDescriptor.<com.example.cirp.RegistrationAPI.getUser, com.example.cirp.RegistrationAPI.UserDetails>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("com.example.cirp.RegistrationService", "GetUser"))
            .setRequestMarshaller(new ProtoMarshaller<com.example.cirp.RegistrationAPI.getUser>(getUserSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.example.cirp.RegistrationAPI.UserDetails>(UserDetailsSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



